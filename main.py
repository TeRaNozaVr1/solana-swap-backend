import os
import requests
import base58
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from solana.rpc.async_api import AsyncClient
from solders.transaction import VersionedTransaction
from solders.pubkey import Pubkey as PublicKey
from solders.signature import Signature
from solders.keypair import Keypair
from spl.token.client import Token
from spl.token.instructions import transfer_checked

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

app = FastAPI()

# üîπ –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
SOLANA_RPC_URL = "https://api.mainnet-beta.solana.com"
TOKEN_DECIMALS = 6  # USDT —Ç–∞ USDC –º–∞—é—Ç—å 6 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏

# üîπ –ê–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤
SPL_RECEIVER_WALLET = PublicKey.from_string("3EwV6VTHYHrkrZ3UJcRRAxnuHiaeb8EntqX85Khj98Zo")
USDT_USDC_SENDER_WALLET = PublicKey("4ofLfgCmaJYC233vTGv78WFD4AfezzcMiViu26dF3cVU")
USDT_USDC_MINT = PublicKey("Es9vMFrzaCER5FjexzX3p2rN3TDXfQFZ9if4x7bqc4Hy")  # USDT SPL-—Ç–æ–∫–µ–Ω

# üîπ –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ (–¥–æ–¥–∞—î—Ç—å—Å—è –≤ .env –∞–±–æ Render)
SECRET_KEY = os.getenv("SOLANA_SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("‚ùå ERROR: Set SOLANA_SECRET_KEY in environment variables!")

SENDER_KEYPAIR = Keypair.from_bytes(base58.b58decode(SECRET_KEY))

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É SOL -> USDT
def get_usdt_exchange_rate():
    url = "https://api.binance.com/api/v3/ticker/price?symbol=SOLUSDT"
    response = requests.get(url).json()
    return float(response["price"]) * 0.00048  # –í—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—É—Ä—Å —Ç–æ–∫–µ–Ω–∞ SPL

# üîπ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±–º—ñ–Ω—É
@app.post("/exchange")
async def exchange_tokens(user_wallet: str, spl_transaction_id: str):
    client = AsyncClient(SOLANA_RPC_URL)

    try:
        # üî∏ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è
        txn = await client.get_transaction(Signature.from_string(spl_transaction_id), commitment="finalized")
        if txn is None or "result" not in txn or txn["result"] is None:
            raise HTTPException(status_code=400, detail="Transaction not found")

        # üî∏ –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö SPL-—Ç–æ–∫–µ–Ω—ñ–≤ (–ü–û–¢–†–Ü–ë–ù–û –ü–ê–†–°–ò–¢–ò –§–ê–ö–¢–ò–ß–ù–Ü –î–ê–ù–Ü)
        spl_amount = 1000  # üî• –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        usdt_amount = int(spl_amount * get_usdt_exchange_rate() * 10**TOKEN_DECIMALS)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É –ª–∞–º–ø–æ—Ä—Ç–∏

        # üî∏ –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø–µ—Ä–µ–∫–∞–∑—É USDT
        usdt_transfer_instr = transfer_checked(
            source=USDT_USDC_SENDER_WALLET,
            dest=PublicKey(user_wallet),
            owner=SENDER_KEYPAIR.pubkey(),
            mint=USDT_USDC_MINT,
            amount=usdt_amount,
            decimals=TOKEN_DECIMALS,
        )

        # üî∏ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –ø—ñ–¥–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        txn = VersionedTransaction([usdt_transfer_instr])
        signed_txn = await client.send_transaction(txn, SENDER_KEYPAIR)

        return {"message": "Exchange successful", "transaction_id": signed_txn.value}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

    finally:
        await client.close()


